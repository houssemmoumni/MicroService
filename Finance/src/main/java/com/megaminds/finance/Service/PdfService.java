        package com.megaminds.finance.Service;

        import com.itextpdf.text.*;
        import com.itextpdf.text.pdf.*;
        import com.megaminds.finance.Entity.FinancialReport;
        import org.springframework.stereotype.Service;

        import java.io.ByteArrayInputStream;
        import java.io.ByteArrayOutputStream;
        import java.io.IOException;
        import java.util.Base64;

        @Service
        public class PdfService {

            public ByteArrayInputStream generateReportPdf(FinancialReport report) {
                try {
                    Document document = new Document(PageSize.A4);
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    PdfWriter.getInstance(document, out);
                    document.open();

                    // Fonts
                    Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20, BaseColor.DARK_GRAY);
                    Font labelFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12);
                    Font valueFont = FontFactory.getFont(FontFactory.HELVETICA, 12);
                    Font footerFont = FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 10, BaseColor.GRAY);

                    // Title
                    Paragraph title = new Paragraph("ðŸ“Š Financial Report", titleFont);
                    title.setAlignment(Element.ALIGN_CENTER);
                    title.setSpacingAfter(20);
                    document.add(title);

                    // Info Table
                    PdfPTable table = new PdfPTable(2);
                    table.setWidthPercentage(100);
                    table.setWidths(new int[]{1, 2});
                    table.setSpacingBefore(10f);

                    addRow(table, "Date du rapport :", report.getDate_rapport().toString(), labelFont, valueFont);
                    addRow(table, "Revenu total :", report.getTotal_revenue() + " â‚¬", labelFont, valueFont);
                    addRow(table, "Profit net :", report.getNet_profit() + " â‚¬", labelFont, valueFont);
                    addRow(table, "Destinataire :", report.getEmail(), labelFont, valueFont);
                    document.add(table);

                    // Footer Text Center
                    Paragraph footer = new Paragraph("Generated by MegaMinds Finance System", footerFont);
                    footer.setAlignment(Element.ALIGN_CENTER);
                    footer.setSpacingBefore(40);
                    document.add(footer);

                    // Signature under "by aziz"
                    if (report.getSignature() != null && !report.getSignature().isEmpty()) {
                        try {
                            String base64Image = report.getSignature().split(",")[1];
                            byte[] decodedBytes = Base64.getDecoder().decode(base64Image);
                            Image signatureImage = Image.getInstance(decodedBytes);
                            signatureImage.scaleToFit(100, 40); // Resize as needed

                            // Create single-column table aligned right
                            PdfPTable signatureBlock = new PdfPTable(1);
                            signatureBlock.setWidthPercentage(30); // Control width
                            signatureBlock.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            signatureBlock.setSpacingBefore(20);

                            // Text "by aziz"
                            PdfPCell textCell = new PdfPCell(new Phrase("by aziz", valueFont));
                            textCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            textCell.setBorder(Rectangle.NO_BORDER);
                            textCell.setPaddingBottom(5);

                            // Signature image cell
                            PdfPCell imageCell = new PdfPCell(signatureImage, false);
                            imageCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            imageCell.setBorder(Rectangle.NO_BORDER);

                            signatureBlock.addCell(textCell);
                            signatureBlock.addCell(imageCell);

                            document.add(signatureBlock);

                        } catch (IOException e) {
                            throw new RuntimeException("Error decoding signature image", e);
                        }
                    }

                    document.close();
                    return new ByteArrayInputStream(out.toByteArray());

                } catch (Exception e) {
                    throw new RuntimeException("Erreur lors de la gÃ©nÃ©ration du PDF", e);
                }
            }


            private void addRow(PdfPTable table, String label, String value, Font labelFont, Font valueFont) {
                PdfPCell labelCell = new PdfPCell(new Phrase(label, labelFont));
                labelCell.setPadding(8);
                labelCell.setBackgroundColor(new BaseColor(245, 245, 245));
                labelCell.setBorderColor(BaseColor.LIGHT_GRAY);

                PdfPCell valueCell = new PdfPCell(new Phrase(value, valueFont));
                valueCell.setPadding(8);
                valueCell.setBorderColor(BaseColor.LIGHT_GRAY);

                table.addCell(labelCell);
                table.addCell(valueCell);
            }

            private Image convertBase64ToImage(String base64String) throws BadElementException, IOException {
                byte[] decodedBytes = Base64.getDecoder().decode(base64String.split(",")[1]); // Remove the prefix (data:image/png;base64,)
                Image image = Image.getInstance(decodedBytes);
                return image;
            }
        }

