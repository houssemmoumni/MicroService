package com.megaminds.pointage.services;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.megaminds.pointage.entities.HistoriquePointage;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;

@Service
public class PdfService {

    private final HistoriquePointageService historiquePointageService;

    public PdfService(HistoriquePointageService historiquePointageService) {
        this.historiquePointageService = historiquePointageService;
    }

    public ByteArrayInputStream generateReportPdf(Long pointageId) {
        try {
            HistoriquePointage report = historiquePointageService.getHistoriquePointageById(pointageId);
            if (report == null) {
                throw new IllegalArgumentException("HistoriquePointage not found with ID: " + pointageId);
            }

            Document document = new Document(PageSize.A4);
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            PdfWriter.getInstance(document, out);
            document.open();

            // Fonts
            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20, BaseColor.DARK_GRAY);
            Font labelFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12);
            Font valueFont = FontFactory.getFont(FontFactory.HELVETICA, 12);
            Font footerFont = FontFactory.getFont(FontFactory.HELVETICA_OBLIQUE, 10, BaseColor.GRAY);

            // Title
            Paragraph title = new Paragraph("ðŸ“Š Pointage Report", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            title.setSpacingAfter(20);
            document.add(title);

            // Info Table
            PdfPTable table = new PdfPTable(2);
            table.setWidthPercentage(100);
            table.setWidths(new int[]{1, 2});
            table.setSpacingBefore(10f);

            addRow(table, "Jour Pointage:", safeToString(report.getJourPointage()), labelFont, valueFont);
            addRow(table, "Temps EntrÃ©e:", safeToString(report.getTempsEntree()), labelFont, valueFont);
            addRow(table, "Temps Sortie:", safeToString(report.getTempsSortie()), labelFont, valueFont);
            addRow(table, "Temps Commencement:", safeToString(report.getTempsCommencement()), labelFont, valueFont);
            addRow(table, "Temps Finition:", safeToString(report.getTempsFinition()), labelFont, valueFont);
            addRow(table, "Score:", safeToString(report.getScore()), labelFont, valueFont);
            addRow(table, "Localisation:", safeToString(report.getLocalisation()), labelFont, valueFont);
            addRow(table, "User ID:", report.getUser() != null ? safeToString(report.getUser().getId()) : "N/A",
                    labelFont, valueFont);

            document.add(table);

            // Footer
            Paragraph footer = new Paragraph("Generated by MegaMinds Pointage System", footerFont);
            footer.setAlignment(Element.ALIGN_CENTER);
            footer.setSpacingBefore(40);
            document.add(footer);

            document.close();
            return new ByteArrayInputStream(out.toByteArray());

        } catch (DocumentException e) {
            throw new RuntimeException("Failed to generate PDF document", e);
        } catch (Exception e) {
            throw new RuntimeException("Failed to generate PDF for pointage ID: " + pointageId, e);
        }
    }

    private void addRow(PdfPTable table, String label, String value, Font labelFont, Font valueFont) {
        PdfPCell labelCell = new PdfPCell(new Phrase(label, labelFont));
        labelCell.setPadding(8);
        labelCell.setBackgroundColor(new BaseColor(245, 245, 245));
        labelCell.setBorderColor(BaseColor.LIGHT_GRAY);

        PdfPCell valueCell = new PdfPCell(new Phrase(value, valueFont));
        valueCell.setPadding(8);
        valueCell.setBorderColor(BaseColor.LIGHT_GRAY);

        table.addCell(labelCell);
        table.addCell(valueCell);
    }

    private String safeToString(Object obj) {
        return obj != null ? String.valueOf(obj) : "N/A";
    }
}